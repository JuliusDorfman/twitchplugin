import './App.sass';
import React from 'react';
import Navbar from './Navbar';
import Instructions from './Components/Instructions';
import Streams from './Streams';
import chatting from './Assets/chatting.gif';
import KUTE from 'kute.js';
// import Appbackground from './Components/Appbackground';

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      pageRerender: false,
      currentPage: 'home',
      streamerName: '',
      getHome: false,
      navWrapper: false,
      bgmShift: false
    }
    
  }

  // dummyFunction = (props) => {
  //   console.log("Dummy Function in App.jsx called from NavbarComponent Props: ", this.props);
  // }

  passStreamerName = (props) => {
    this.setState({ streamerName: props.searchSubmit });
    // The Streams component passes down this.state.streamerName 
    // The Streams commponent on componentDidUpdate compares the prevProps
    // with the new props and triggers api.post(/getStreamerChannel)
  }

  passGetTopGames = (currentPage) => {
    this.setState({ getHome: true })
  }

  // NEVER DO THIS AGAIN
  // handleSetHome =() =>{
  //   this.setState({getHome: false})
  // }
  
  
  handleScroll = () => {
    let scrollTop = window.scrollY;
    scrollTop > 150 ? this.setState({ navWrapper: true }) : this.setState({ navWrapper: false });
  }

  handleBlobButton = () => {
    let bgmShift = this.state.bgmShift;
    bgmShift = bgmShift ? false : true;
    this.setState({bgmShift: bgmShift});

  }

  componentDidMount = () => {
    window.addEventListener('scroll', this.handleScroll);
    const blobAnim = KUTE.fromTo(
      '#blob-1',
      { path: '#blob-1' },
      { path: '#blob-2' },
      { repeat: 999, duration: 2000, yoyo: true }
    )
    blobAnim.start();
  }

  componentWillUnmount = () => {
    window.removeEventListener('scroll', this.handleScroll);
    // this.blobAnim.stop();
  }


  render() {
    let navWrapper = this.state.navWrapper;
    let bgmShift = this.state.bgmShift;
    return (
      <div className="App" onScroll={this.handleScroll}>
        <Instructions />
        <header className="App-header">
          <Navbar bgmShift={bgmShift} navWrapper={navWrapper} searchSubmit={this.state.searchInput} pageRerender={this.state.pageRerender}
            handleDummyFunction={this.dummyFunction} passStreamerName={this.passStreamerName} passGetTopGames={this.passGetTopGames} />
          <h1 id="site-title"><span className="italicized">Art of Twitch Chat</span></h1>
          <img src={chatting} alt="pepe-typing" /><p className="sub-header">Art Generated by the chat contributions of your peers!</p>
        </header>
        <main>
          <Streams streamername={this.state.streamerName} getHome={[this.state.getHome, this.state.currentPage]} />
          {/* <Streams streamername={this.state.streamerName} getHome={[this.state.getHome, this.state.currentPage]} setHome={this.handleSetHome()}/> */}
        </main>
        {/* <Appbackground /> */}
        {/* <div className="spacer layer1"></div> */}
        <svg id="blob-button"  viewBox="0 0 960 300" width="960" height="300" version="1.1">
          <g className={`blob-button-${bgmShift}`} transform="translate(484.1535820659599 145.4810835912449)" onClick={this.handleBlobButton}>
            <path id="blob-1" className={`blob-1-${bgmShift}`} d="M84.1 -77.4C105.9 -62.2 118.4 -31.1 111.7 -6.7C105 17.7 79 35.4 57.2 55C35.4 74.7 17.7 96.3 -2.5 98.8C-22.6 101.3 -45.3 84.6 -70.3 64.9C-95.3 45.3 -122.6 22.6 -121.8 0.8C-121 -21 -92 -42 -67 -57.1C-42 -72.3 -21 -81.6 5.1 -86.7C31.1 -91.8 62.2 -92.6 84.1 -77.4" >
            </path>
          </g>
          <g transform="translate(475.31093316137367 152.90827363030346)" style={{visibility: "hidden"}}>
            <path id="blob-2" className={`blob-2-${bgmShift}`} d="M60.4 -54.9C85.4 -35.4 117.7 -17.7 119.8 2.1C121.9 21.9 93.8 43.8 68.8 62.3C43.8 80.8 21.9 95.9 2 93.9C-17.9 91.9 -35.8 72.8 -58 54.3C-80.2 35.8 -106.6 17.9 -110.1 -3.5C-113.7 -25 -94.3 -50 -72.1 -69.5C-50 -89 -25 -103 -3.7 -99.3C17.7 -95.7 35.4 -74.4 60.4 -54.9">
            </path>
          </g>
        </svg>
        <div id="background-2" className={`background-2-${bgmShift}`}></div>
      </div>
    );
  }
}

export default App;
